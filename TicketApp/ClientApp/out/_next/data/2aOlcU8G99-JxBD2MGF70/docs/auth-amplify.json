{"pageProps":{"article":{"content":"\n# Amplify\n\nAWS Amplify is a set of services accompanied by various tools and libraries created to help the\ndevelopment of apps. Their suite offers among other features, an authentication feature, which can\nbe used as a stand-alone authentication system. The project is able to be used with this\nauthentication system, as well. Should you want to implement any of the other features Amplify\noffers, you can refer to their [documentation](https://docs.amplify.aws/).\n\n## Set up your Amplify account\n\nThe documentation for this, can be found in the official documentation of the service, mentioned\nabove.\n\n## Configuration\n\nIn order to configure Amplify client library you have to open (or create) `.env` file in the\nproject's root folder and set the following variables as presented in your Amplify account settings:\n\n```shell\nNEXT_PUBLIC_AWS_COGNITO_IDENTITY_POOL_ID=\nNEXT_PUBLIC_AWS_COGNITO_REGION=\nNEXT_PUBLIC_AWS_PROJECT_REGION=\nNEXT_PUBLIC_AWS_USER_POOLS_ID=\nNEXT_PUBLIC_AWS_USER_POOLS_WEB_CLIENT_ID=\n```\n\nIf you do not want to set up environment variables, settings can be applied simply on\nthe `amplifyConfig` object found in the `src/config.js` file.\n\n```js\nexport const amplifyConfig = {\n  aws_project_region: '',\n  aws_cognito_identity_pool_id: '',\n  aws_cognito_region: '',\n  aws_user_pools_id: '',\n  aws_user_pools_web_client_id: ''\n};\n```\n\n## How it was implemented\n\nAs mentioned above, Amplify offers a set of components to help your development process, although\nthey're not used in the app.\n\nThe `Auth` singleton from the library is used to provide the authentication feature to a context (\nwhich wraps the content of the `App` component).\n\nThis aforementioned context is then used in the component tree to access the `Auth` public methods.\nIt provides the user authentication status and user profile, if available.\n\n## How to use Amplify Provider\n\nBy default, the project uses a mocked `JWT provider` (as in: it doesn't use an actual JWT based\nauthentication server). To make use of Amplify simply follow these steps:\n\n### Step 1. Replace the provider and consumer\n\nOpen `src/pages/_app.js` file and replace the following line:\n\n```js\nimport { AuthConsumer, AuthProvider } from '../contexts/auth/jwt-context';\n```\n\nwith\n\n```js\nimport { AuthConsumer, AuthProvider } from '../contexts/auth/amplify-context';\n```\n\n### Step 2. Replace the hook context\n\nOpen `src/hooks/use-auth.js` file and replace the following line:\n\n```js\nimport { AuthContext } from '../contexts/auth/jwt-context';\n```\n\nwith\n\n```js\nimport { AuthContext } from '../contexts/auth/amplify-context';\n```\n\n## How to use auth\n\n### Retrieve user profile\n\nIn the example below, you can find how it can be used in any component not just the `App`. Should\nyou want to use it in any other component, you'll have to import the `useAuth` hook and use it as\nneeded.\n\n```jsx\n// src/pages/index.js\nimport { useAuth } from '../hooks/use-auth';\n\nconst Page = () => {\n  const { user } = useAuth();\n\n  return (\n    <div>\n      Email: {user.email}\n    </div>\n  );\n};\n```\n\n### Auth methods / actions\n\n> For simplicity and space limitations, the code below is used only to exemplify, actual code can be found in the components.\n\n```jsx\n// src/pages/index.js\nimport { useAuth } from '../hooks/use-auth';\n\nconst Page = () => {\n  const { login } = useAuth();\n  \n  const handleLogin = () => {\n    // Email/username and password\n    login('demo@devias.io', 'Password123!');\n  };\n\n  return (\n    <div>\n      <button onClick={handleLogin}>\n        Login\n      </button>\n    </div>\n  );\n};\n```\n\n## Implemented flows\n\nCurrently, the app only covers the main flows:\n\n- Sign in\n- Sign up\n- Confirm sign up\n- Resend sign up\n- Forgot password\n- Forgot password submit\n- Logout\n","slug":"auth-amplify","title":"Amplify"}},"__N_SSG":true}