{"pageProps":{"article":{"content":"\n# Auth Guard\n\nThis is a simple component that can be used to protect a private route. It controls whether it\nshould allow navigation to a requested route based on given context. Similar to the GuestGuard,\nthe app provides a `hoc` to prevent the entire page render.\n\n## Example\n\n```jsx\n// src/pages/dashboard/index.js\nimport { withAuthGuard } from '../../hocs/with-auth-guard';\n\nconst Page = () => {\n  return (\n    <div>\n      content\n    </div>\n  );\n};\n\nexport default withAuthGuard(Page);\n```\n\n## How it works\n\nIt connects with the authentication provider (Amplify, Auth0, Firebase, or JWT, depending on your\nsetup) and extracts the required data to detect whether it should render the children passed as\nprops, otherwise it redirects to the `Login` component with a redirect url query string parameter\nto allow the Login component to redirect back to the requested url after a successful \nauthentication.\n\n## How it can be extended\n\nAs mentioned, this is a sample component, thus it can and should be adjusted to match your business\nneeds.\n","slug":"guards-auth","title":"Auth Guard"}},"__N_SSG":true}