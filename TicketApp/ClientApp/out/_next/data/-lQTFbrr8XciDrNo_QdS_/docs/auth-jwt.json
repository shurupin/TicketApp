{"pageProps":{"article":{"content":"\n# JSON Web Token (JWT)\n\nMost auth providers use this strategy under the hood to provide access tokens. Currently, the app\ndoesn't cover the backend service, and this service is mocked (faked) using http client\ninterceptors. The implementation is basic, but enough to give you a starting point.\n\n## How it was implemented\n\nSince tokens are meant to be created on the backend server, they are built with encrypt, encode and\ndecode utility methods because they are not meant to be used on the client. These utilities can be\nfound in `src/utils/jwt`. These are for development purposes only, and you must remove (or avoid\nusing) them.\n\n## How to use JWT Provider\n\nThe app is delivered with JWT Provider as default auth strategy. If you changed or removed it, and\nyou want it back, simply follow these steps:\n\n### Step 1. Import the provider\n\nOpen `src/pages/_app.js` file, import the provider and wrap the App component with it.\n\n```jsx\n// src/pages/_app.js\nimport { AuthConsumer, AuthProvider } from '../contexts/auth/jwt-context';\n\nconst App = (props) => {\n  const { Component, pageProps } = props;\n    \n  return (\n    <AuthProvider>\n      <Component {...pageProps} />\n    </AuthProvider>\n  );\n};\n```\n\n### Step 2. Set the hook context\n\nOpen `src/hooks/use-auth.js` file and replace the current context the following line:\n\n```js\nimport { AuthContext } from '../contexts/auth/jwt-context';\n```\n\n## How to use auth\n\n### Retrieve user profile\n\nIn the example below, you can find how it can be used in any component not just the `App`. Should\nyou want to use it in any other component, you'll have to import the `useAuth` hook and use it as\nneeded.\n\n```jsx\n// src/pages/index.js\nimport { useAuth } from '../hooks/use-auth';\n\nconst Page = () => {\n  const { user } = useAuth();\n\n  return (\n    <div>\n      Email: {user.email}\n    </div>\n  );\n};\n```\n\n### Auth methods / actions\n\n> For simplicity and space limitations, the code below is used only to exemplify, actual code can be found in the components.\n\n```jsx\n// src/pages/index.js\nimport { useAuth } from '../hooks/use-auth';\n\nconst Page = () => {\n  const { login } = useAuth();\n  \n  const handleLogin = () => {\n    // Email/username and password\n    login('demo@devias.io', 'Password123!');\n  };\n\n  return (\n    <div>\n      <button onClick={handleLogin}>\n        Login\n      </button>\n    </div>\n  );\n};\n```\n\n## Implemented flows\n\nCurrently, the app only covers the main flows:\n\n- Register\n- Login\n- Logout\n","slug":"auth-jwt","title":"JWT"}},"__N_SSG":true}