{"pageProps":{"article":{"content":"\n# Redux\n\nRedux is more robust alternative for state management, that offers more helpful features out of the\nbox. Follow the\n[official documentation](https://redux.js.org/basics/usage-with-react) to understand the entire\nconcept behind it.\n\n## Usage\n\nThe app uses `Redux Toolkit` with hooks (Thunk method, not Sagas) to manage the state\nfor `Calendar`, `Chat`,\n`Kanban` and `Mail` apps.\n\nThis can be replaced with `Context API`, or any other system, in a matter of hours due the clean\nstructure of the project.\n\nThe app at hand uses Redux, but you can find Context API examples in the project. You can also opt\nfor\n[Recoil](https://recoiljs.org/), maintained by **Facebook**, a new alternative that allows you to\nsplit the state in multiple \"atoms\". An example is not included, but the ones from Facebook\ndocumentation should be simple enough to use in your project.\n\n## How to use\n\nThere are 2 main folders:\n\n1. `src/slices` where you can find the implementation of the reducer logic.\n2. `src/store` which exports a store and combines the reducers in one root reducer.\n\nIf you're new to Redux Toolkit, please read\ntheir [official documentation](https://redux-toolkit.js.org/usage/usage-guide)\nto understand the basics.\n\n## Example\n\nYou can take as an example the blog feature of this app where; should you want to implement Redux;\nyou can do it as follows:\n\n### Create a new slice\n\nCreate a new file in `src/slices`, and name it `blog.js`. Now open this new file with your favorite\nIDE, and import\n`createSlice` from `@reduxjs/toolkit` package to create the new slice.\n\n```js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  articles: []\n};\n\nconst slice = createSlice({\n  name: 'blog',\n  initialState,\n  reducers: {}\n});\n\nexport const { reducer } = slice;\n\nexport default slice;\n```\n\nIt is important to assign a name to the slice and an initial state.\n\n### Create a reducer action\n\nLet's get back to the newly created slice and add a `setArticles` action.\n\n```js\nconst slice = createSlice({\n  name: 'blog',\n  initialState,\n  reducers: {\n    setArticles(state, payload) {\n      // You should get articles from the action payload. \n      // For simplicity's sake let's use static data instead.\n\n      state.articles = [\n        {\n          id: '1',\n          title: 'My first article'\n        }\n      ];\n    }\n  }\n});\n```\n\n> Important: The state is a Proxy object, you cannot update it directly, and you have to update its keys instead.\n>\n> For example `state = { name: 'Alex' }` will break the state, but `state.user = { name: 'Alex' }` works as expected.\n\n### Create a thunk method\n\nThis allows you to dispatch multiple actions, extremely useful for async requests.\n\nIn the created slice file, create a `getPosts` method that dispatches the slice `setArticles`\naction.\n\n```js\nexport const getPosts = () => async (dispatch) => {\n  // Here make an async request to your sever and extract the data from the server response\n  // const response = await axios.get('/__fake-api__/blog/articles');\n  // const { data } = reponse;\n\n  const data = [\n    {\n      id: '1',\n      title: 'My first article'\n    }\n  ];\n\n  dispatch(slice.actions.setArticles(data));\n};\n```\n\nNow, that you have a method that dispatches an action, you can update the `setArticles` action to\nuse the data from the payload.\n\n```js\nconst slice = createSlice({\n  name: 'blog',\n  initialState,\n  reducers: {\n    setArticles(state, payload) {\n      state.articles = payload.articles;\n    }\n  }\n});\n```\n\n### Combine the new slice in the root reducer\n\nIn the file `src/store/rootReducer.js` use the reducer from your newly created slice.\n\n```js\nimport { reducer as blogReducer } from '../slices/blog';\n\nconst rootReducer = combineReducers({\n  // ...other reducers\n  blog: blogReducer\n});\n```\n\n### Using the slice state\n\n```jsx\nimport { useSelector } from 'react-redux';\n\nconst Page = () => {\n  const { articles } = useSelector((state) => state.blog);\n\n  return (\n    <div>\n      <div>\n        {articles.map((article) => (\n          <div>\n            Article ID: {article.id}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n```\n\n> Please refrain from changing the state directly (without an action) in order to avoid chained re-renders.\n\n### Dispatching an action\n\nThis is the last step of the process. Execute the method `getPosts` to dispatch the slice action\nand update the slice state. Once the action sets the new state, the app will re-render your current\ncomponent, and the articles will be displayed.\n\n```jsx\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPosts } from '../slices/blog';\n\nconst Page = () => {\n  const dispatch = useDispatch();\n  const { articles } = useSelector((state) => state.blog);\n\n  const handleClick = () => {\n    dispatch(getPosts());\n  };\n\n  return (\n    <div>\n      <div>\n        {articles.map((article) => (\n          <div>\n            Article ID: {article.id}\n          </div>\n        ))}\n      </div>\n      <Button onClick={handleClick}>\n        Load articles\n      </Button>\n    </div>\n  );\n};\n```\n","slug":"redux","title":"Redux"}},"__N_SSG":true}