{"pageProps":{"article":{"content":"\n# Environment Variables\n\nBy default, Next.js compiler looks for `.env` file in projects root folder and reads\nits content. In the project files you'll find a file `.env.example` that contains all the\nenvironment variables that were used in the app environment. **Not all are required.**\n\n## Loading Environment Variables\n\nNext.js has built-in support for loading environment variables from `.env` file into `process.env`.\n\nAn example `.env`:\n\n```shell\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n```\n\nThis loads `process.env.DB_HOST`, `process.env.DB_USER`, and `process.env.DB_PASS` into the Node.js \nenvironment automatically allowing you to use them in Next.js data fetching methods and API routes.\n\nFor example, using `getStaticProps`:\n\n```jsx\n// pages/index.js\nexport async function getStaticProps() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  });\n  // ...\n}\n```\n\n## Exposing Environment Variables to the Browser\n\nBy default environment variables are only available in the Node.js environment, meaning they won't\nbe exposed to the browser.\n\nIn order to expose a variable to the browser you have to prefix the variable with `NEXT_PUBLIC_`. \nFor example:\n\n```shell\nNEXT_PUBLIC_ANALYTICS_ID=abcdefghijk\n```\n\n> WARNING: Do not store any secrets (such as private API keys or passwords) in the public variables!\n> These environment variables are embedded into the build, meaning anyone can view them by \n> inspecting your app's files.\n\n## Private Variables\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nRead more about environment\nvariables [here](https://create-react-app.dev/docs/adding-custom-environment-variables).\n","slug":"environment-variables","title":"Environment Variables"}},"__N_SSG":true}