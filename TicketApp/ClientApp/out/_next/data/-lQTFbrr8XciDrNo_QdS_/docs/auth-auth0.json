{"pageProps":{"article":{"content":"\n# Auth0\n\nAuth0 is an easy to implement, adaptable authentication and authorization platform. Auth0 provides a\nlibrary built for React, but the app uses a more generic library designed for universal SPAs. This\ngives you more control over the components, as the app needs to provide support for multiple\nauthentication providers. You can refer to their [documentation](https://auth0.com/docs/)\nas you deem fit, or in case you need things not covered in the app.\n\n## Set up your Auth0 account\n\nThe documentation for this, can be found in the official documentation of the service, mentioned\nabove.\n\n## Configuration\n\nTo configure Auth0 client library you have to open (or create) `.env` file in the project's root\nfolder and set the following variables as presented in your Auth0 account settings:\n\n```shell\nNEXT_PUBLIC_AUTH0_BASE_URL= # http://localhost:3000 or your website base URL\nNEXT_PUBLIC_AUTH0_CLIENT_ID= # your Auth0 application client ID\nNEXT_PUBLIC_AUTH0_ISSUER_BASE_URL= # your Auth0 tenant domain\n```\n\nIf you do not want to set up environment variables you can simply set the `auth0Config` object\nfrom `src/config.js` file.\n\n```js\nexport const auth0Config = {\n  base_url: '',\n  client_id: '',\n  issuer_base_url: ''\n};\n```\n\n## How it was implemented\n\nAs mentioned, Auth0 offers a set of components to help your development process, although they're\nnot used in the app.\n\nThe `Auth0Client` class from the library is used to provide the authentication feature to a\ncontext (which wraps the content of the `App` component).\n\nThis aforementioned context is then used in the component tree to access the `Auth0Client` instance\npublic methods. It provides the user authentication status and user profile, if available.\n\n## How to use Auth0 Provider\n\nBy default, the project uses a mocked `JWT provider` (as in: it doesn't use an actual JWT based\nauthentication server). To make use of Amplify simply follow these steps:\n\n### Step 1. Replace the provider\n\nOpen `src/pages/_app.js` file and replace the following line:\n\n```js\nimport { AuthConsumer, AuthProvider } from '../contexts/auth/jwt-context';\n```\n\nwith\n\n```js\nimport { AuthConsumer, AuthProvider } from '../contexts/auth/auth0-context';\n```\n\n### Step 2. Replace the hook context\n\nOpen `src/hooks/use-auth.js` file and replace the following line:\n\n```js\nimport { AuthContext } from '../contexts/auth/jwt-context';\n```\n\nwith\n\n```js\nimport { AuthContext } from '../contexts/auth/auth0-context';\n```\n\n## How to use auth\n\n### Retrieve user profile\n\nIn the example below, you can find how it can be used in any component not just the `App`. Should\nyou want to use it in any other component, you'll have to import the `useAuth` hook and use it as\nneeded.\n\n```jsx\n// src/pages/index.js\nimport { useAuth } from '../hooks/use-auth';\n\nconst Page = () => {\n  const { user } = useAuth();\n\n  return (\n    <div>\n      Email: {user.email}\n    </div>\n  );\n};\n```\n\n### Auth methods / actions\n\n> For simplicity and space limitations, the code below is used only to exemplify, actual code can be found in the components.\n\n```jsx\n// src/pages/index.js\nimport { useAuth } from '../hooks/use-auth';\n\nconst Page = () => {\n  const { loginWithRedirect } = useAuth();\n  \n  const handleLogin = () => {\n    loginWithRedirect();\n  };\n\n  return (\n    <div>\n      <button onClick={loginWithRedirect}>\n        Login\n      </button>\n    </div>\n  );\n};\n```\n\n## Implemented flows\n\nCurrently, the app only covers the main flows:\n\n- Login with redirect (also used to register)\n- Logout\n","slug":"auth-auth0","title":"Auth0"}},"__N_SSG":true}